import java.util.Collections;import java.util.ArrayList;import java.util.List;import javax.swing.*;import javax.swing.event.MouseInputAdapter;import java.awt.*;import java.awt.event.*;public class Main{	//perimeter bevel: space between perimeter cards and content panel edge    public static final int P_BEVEL = 5;    //interior bevel: space between cards on all sides    public static final int I_BEVEL = 5;          public static final int CARD_HEIGHT = 97;    public static final int CARD_WIDTH = 73;    public static final String   BACKGROUND_COLOR = "#64C866";    public static final String   CARD_FOLDER = "cardImages/";    public static final String[] SUITS =     						{ "Spades","Hearts","Clubs","Diamonds" };    public static final String[] RANKS =     						{ "ace","two","three","four","five","six","seven",                              "eight","nine","ten","jack","queen","king" };    public static List<JLabel> deck = new ArrayList<JLabel>();    public static MouseInputAdapter mouseHandler = new MouseInputAdapter(){    	//internal JLabel displacement on mouse press for smooth dragging        public int labelDisX;           //internal JLabel displacement on mouse press for smooth dragging        public int labelDisY;                         public void mousePressed(MouseEvent e) {            labelDisX = e.getX();            labelDisY = e.getY();            //move the card above all others            e.getComponent().getParent().setComponentZOrder(e.getComponent(), 0);             //repaint so card moves above others            e.getComponent().getParent().repaint();                                       }        public void mouseDragged (MouseEvent e) {            JPanel panel = (JPanel) e.getComponent().getParent();            //get preliminary new X coordinate            int newX = e.getComponent().getX() + e.getX() - labelDisX;             //get preliminary new Y coordinate            int newY = e.getComponent().getY() + e.getY() - labelDisY;              //here we check that the card is not            //being moved off the panel. If the            //user does try and do this then            //make the new coordinates such that            //the card is bounded by the panel's            //edges [extra credit]            if(newX > panel.getWidth() - CARD_WIDTH) {                newX = panel.getWidth() - CARD_WIDTH;                                         }                                                                                 if(newY > panel.getHeight() - CARD_HEIGHT) {                                          newY = panel.getHeight() - CARD_HEIGHT;                                       }                                                                                 if(newX < 0) { newX = 0; }                                                        if(newY < 0) { newY = 0; }            e.getComponent().setLocation(newX, newY);        }    };    /**     * prints the movable cards randomly in a 4(r) X 14(c) grid.     * @param args (ignored)     */    public static void main(String[] args)    {    	//populate deck of cards (JLabels)        for(String suit : SUITS) {                                                        for(String rank : RANKS) {                deck.add(new JLabel(                		 new ImageIcon(CARD_FOLDER+rank+suit+".gif")));            }        }        //shuffles the deck of cards        Collections.shuffle(deck);                                                    JFrame window = new JFrame();        JPanel panel = new JPanel(            new GridLayout(SUITS.length, RANKS.length, I_BEVEL, I_BEVEL)) {        	//create the gray ImageIcon            ImageIcon gray = new ImageIcon(CARD_FOLDER+"gray.gif");                       public void paintComponent(Graphics g) {                          super.paintComponent(g);                //print out 56 gray images on the panel                //in a 4 x 14 grid pattern [extra credit]                //i/4 is the column number to draw in                //i%4 is the row number to draw in                for (int i = 0; i < SUITS.length*RANKS.length; i++) {                             gray.paintIcon(this, g,                                                           P_BEVEL + (i / 4) * (CARD_WIDTH + I_BEVEL),                                   P_BEVEL + (i % 4) * (CARD_HEIGHT + I_BEVEL));                         }            }        };        //display 52 cards as JLabels on top of        //the gray squares. Add the mouseEvents        //listener for both pressing and dragging        for(JLabel card : deck) {                                                         card.addMouseMotionListener(mouseHandler);                                    card.addMouseListener(mouseHandler);                                          panel.add(card);        }        panel.setBorder(BorderFactory.createEmptyBorder(P_BEVEL,                P_BEVEL + I_BEVEL + CARD_WIDTH, P_BEVEL, P_BEVEL));        window.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);        window.setBackground(Color.decode(BACKGROUND_COLOR));        window.add(panel);        window.pack();        window.setVisible(true);        window.setResizable(false);    }}